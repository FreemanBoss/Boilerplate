import pytest
import pyotp
from datetime import datetime, timedelta

from tests.conftest_helper import create_login_payload
from api.v1.user.service import user_service

device_info = {
    "device_id": "akjfokallkd09u0454l5lkaj095",
    "platform": "ios",
    "device_name": "Galaxy S8",
    "app_version": "1.0.0",
}
login_endpoint = "/api/v1/auth/login"
setup_endpoint = "/api/v1/auth/2FA/setup"
verify_setup_endpoint = "/api/v1/auth/2FA/verify-setup"
verify_login_endpoint = "/api/v1/auth/2FA/verify-login"
trusted_devices_endpoint = "/api/v1/auth/2FA/trusted-devices"

@pytest.mark.asyncio
class TestTwoFactorAuth:
    """
    Test class for 2FA route
    """
    
    async def test_2fa_setup_and_verify(
        self, client, test_get_session, test_setup, mock_creation
    ):
        """End to End Test of 2FA setup

        Flow:
            - Login by users who haven't setup 2FA should not require it
            - Users request to setup
            - They get a code and authuri to link the app with an authenticator
            - They verify the setup with the 6 digit code generated by the authenticator
            - On success, 2FA is enabled
            - On verification success, the device is added to trusted devices 
        """
        johnson_superadmin, jayson_user, lagos, abuja, free_tier, weekly = mock_creation

        # Simulate a login attempt
        # 2FA should not be required
        login_response = client.post(
            login_endpoint,
            json=create_login_payload("johnson@gmail.com", "Johnson1234@")
        )

        assert login_response.status_code == 200
        assert "requires_2fa" in login_response.json()
        assert "temp_token" in login_response.json()
        assert login_response.json()["requires_2fa"] == False

        access_token = login_response.json()["data"]["access_token"]

        # Initiate 2FA setup
        setup_response = client.post(
            setup_endpoint,
            json={
                "password": "Johnson1234@",
                "device_info": device_info
            },
            headers={"Authorization": f"Bearer {access_token}"}
        )
        assert setup_response.status_code == 200
        assert "secret_key" in setup_response.json()["data"]
        assert "auth_uri" in setup_response.json()["data"]
        assert "backup_codes" in setup_response.json()["data"]

        # Simulate TOTP code generation
        secret = setup_response.json()["data"]["secret_key"]
        totp = pyotp.TOTP(secret)
        valid_code = totp.now()

        # Simulate an invalid verification code
        invalid_response = client.post(
            verify_setup_endpoint,
            json={
                "code": "123456"
            },
            headers={"Authorization": f"Bearer {access_token}"}
        )
        assert invalid_response.status_code == 400
        assert "Invalid verification code" in invalid_response.json()["message"]

        # Verify 2FA setup with valid code
        verify_response = client.post(
            verify_setup_endpoint,
            json={"code": valid_code},
            headers={"Authorization": f"Bearer {access_token}"}
        )
        assert verify_response.status_code == 200
        assert verify_response.json()["message"] == "2FA setup completed successfully"

        # Check that 2FA is enabled for the user
        user = await user_service.fetch({"id": johnson_superadmin.id}, test_get_session)
        await test_get_session.refresh(user)
        assert user.two_factor_secret == secret
        assert user.backup_codes
        assert user.two_factor_enabled is True

        # Simulate an expired/invalid setup attempt
        # All data stored in session should have been deleted
        expired_response = client.post(
            verify_setup_endpoint,
            json={
                "code": totp.at(datetime.now() + timedelta(minutes=5))
            },
            headers={"Authorization": f"Bearer {access_token}"}
        )
        assert expired_response.status_code == 400
        assert "2FA setup session expired" in expired_response.json()["message"]

        # Trusted devices check
        trusted_devices_response = client.get(
            trusted_devices_endpoint,
            headers={"Authorization": f"Bearer {access_token}"}
        )

        assert trusted_devices_response.status_code == 200
        assert "Trusted devices list successfully generated" in trusted_devices_response.json()["message"]
        for device in trusted_devices_response.json()["data"]:
            assert device_info["device_id"] in device["device_id"]

        # Remove trusted device
        device_id = trusted_devices_response.json()["data"][0]["id"]

        removed_device_response = client.delete(
            f"{trusted_devices_endpoint}/{device_id}",
            headers={"Authorization": f"Bearer {access_token}"}
        )

        assert removed_device_response.status_code == 200
        assert "Device removed from trusted devices" in removed_device_response.json()["message"]
        assert removed_device_response.json()["data"] == {}

        # Confirm Trusted devices list is empty
        # Using the is_trusted param
        trusted_devices_response = client.get(
            f"{trusted_devices_endpoint}?is_trusted=true",
            headers={"Authorization": f"Bearer {access_token}"}
        )

        assert trusted_devices_response.status_code == 200
        assert "Trusted devices list successfully generated" in trusted_devices_response.json()["message"]
        assert trusted_devices_response.json()["data"] == []
        

    async def test_2fa_login_flow(
        self, client, test_get_session, test_setup, mock_creation
    ):
        """Test 2FA verify login endpoint"""

        johnson_superadmin, jayson_user, lagos, abuja, free_tier, weekly = mock_creation

        # Enable 2FA for user
        johnson_superadmin.two_factor_secret = "ABCDEFGHIJKLMNOP"
        johnson_superadmin.two_factor_enabled = True
        johnson_superadmin.backup_codes = ["40940", "5595"]
        test_get_session.add(johnson_superadmin)
        await test_get_session.commit()

        # Simulate a login attempt
        # 2FA should be required since we manually enabled it
        login_response = client.post(
           login_endpoint,
            json=create_login_payload("johnson@gmail.com", "Johnson1234@")
        )

        assert login_response.status_code == 200
        assert "requires_2fa" in login_response.json()
        assert "temp_token" in login_response.json()
        assert login_response.json()["requires_2fa"] == True


        # Simulate a valid 2FA verification
        totp = pyotp.TOTP(johnson_superadmin.two_factor_secret)
        valid_code = totp.now()
        verify_response = client.post(
            verify_login_endpoint,
            json={
                "temp_token": login_response.json()["temp_token"],
                "code": valid_code,
                "device_info": device_info
            }
        )

        assert verify_response.status_code == 200
        assert "access_token" in verify_response.json()["data"]
        assert "refresh_token" in verify_response.json()["data"]
        assert verify_response.json()["requires_2fa"] == False

        # Simulate an invalid 2FA verification
        invalid_response = client.post(
            verify_login_endpoint,
            json={
                "temp_token": login_response.json()["temp_token"],
                "code": "123456",
                "device_info": device_info
            }
        )

        assert invalid_response.status_code == 400
        assert "Invalid verification code" in invalid_response.json()["message"]