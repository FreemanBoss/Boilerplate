"""initial migrations

Revision ID: a64418a510f9
Revises: 
Create Date: 2024-11-02 22:41:50.489201

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a64418a510f9"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
from api.v1.enum_types import *


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=True),
        sa.Column("last_name", sa.String(length=50), nullable=True),
        sa.Column("email_verified", sa.Boolean(), nullable=False),
        sa.Column("idempotency_key", sa.String(length=255), nullable=True),
        sa.Column(
            "gender",
            gender_type_enum,
            nullable=True,
        ),
        sa.Column("date_of_birth", sa.DateTime(), nullable=True),
        sa.Column("location", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("is_suspended", sa.Boolean(), nullable=False),
        sa.Column(
            "last_login",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=True)
    op.create_table(
        "date_invitations",
        sa.Column("inviter_id", sa.String(length=60), nullable=False),
        sa.Column("invitee_id", sa.String(length=60), nullable=False),
        sa.Column("date_time", sa.DateTime(), nullable=False),
        sa.Column("destination", sa.String(), nullable=False),
        sa.Column("inviter_pickup_location", sa.String(), nullable=True),
        sa.Column("invitee_pickup_location", sa.String(), nullable=True),
        sa.Column("inviter_logistic", sa.String(), nullable=True),
        sa.Column("invitee_logistic", sa.String(), nullable=True),
        sa.Column("inviter_security", sa.String(), nullable=True),
        sa.Column("invitee_security", sa.String(), nullable=True),
        sa.Column(
            "status",
            date_invitation_status_enum,
            server_default="pending",
            nullable=False,
        ),
        sa.Column("closing_hour", sa.Time(), nullable=True),
        sa.Column("menu_url", sa.Time(), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["invitee_id"],
            ["users.id"],
            name=op.f("fk_date_invitations_invitee_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["inviter_id"],
            ["users.id"],
            name=op.f("fk_date_invitations_inviter_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_date_invitations")),
    )
    op.create_index(
        op.f("ix_date_invitations_destination"),
        "date_invitations",
        ["destination"],
        unique=False,
    )
    op.create_index(
        op.f("ix_date_invitations_id"), "date_invitations", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_date_invitations_invitee_id"),
        "date_invitations",
        ["invitee_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_date_invitations_inviter_id"),
        "date_invitations",
        ["inviter_id"],
        unique=False,
    )
    op.create_table(
        "dyt_tokens",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("balance", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_dyt_tokens_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dyt_tokens")),
    )
    op.create_index(op.f("ix_dyt_tokens_id"), "dyt_tokens", ["id"], unique=True)
    op.create_table(
        "events",
        sa.Column("creator_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("details", sa.Text(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("ticket_price", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column("banner", sa.String(), nullable=True),
        sa.Column("tickets_available", sa.Integer(), nullable=True),
        sa.Column("total_capacity", sa.Integer(), nullable=True),
        sa.Column("ticket_types", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_events_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_events")),
    )
    op.create_index(op.f("ix_events_id"), "events", ["id"], unique=True)
    op.create_table(
        "gifts",
        sa.Column("creator_id", sa.String(length=60), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_gifts_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_gifts")),
    )
    op.create_index(op.f("ix_gifts_id"), "gifts", ["id"], unique=True)
    op.create_index(op.f("ix_gifts_name"), "gifts", ["name"], unique=False)
    op.create_table(
        "libraries",
        sa.Column("creator_id", sa.String(length=60), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("cover_url", sa.String(), nullable=True),
        sa.Column("book_url", sa.String(), nullable=True),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("price", sa.Float(), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_libraries_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_libraries")),
    )
    op.create_index(op.f("ix_libraries_id"), "libraries", ["id"], unique=True)
    op.create_index(op.f("ix_libraries_title"), "libraries", ["title"], unique=False)
    op.create_table(
        "locations",
        sa.Column("creator_id", sa.String(length=60), nullable=True),
        sa.Column("location", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_locations_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_locations")),
    )
    op.create_index(op.f("ix_locations_id"), "locations", ["id"], unique=True)
    op.create_table(
        "matches",
        sa.Column("user_sent_match_id", sa.String(length=60), nullable=False),
        sa.Column("user_accept_match_id", sa.String(length=60), nullable=False),
        sa.Column("relationship_type", sa.String(), nullable=True),
        sa.Column("notify", sa.Boolean(), server_default="FALSE", nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_accept_match_id"],
            ["users.id"],
            name=op.f("fk_matches_user_accept_match_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_sent_match_id"],
            ["users.id"],
            name=op.f("fk_matches_user_sent_match_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_matches")),
    )
    op.create_index(op.f("ix_matches_id"), "matches", ["id"], unique=True)
    op.create_index(
        op.f("ix_matches_user_accept_match_id"),
        "matches",
        ["user_accept_match_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_matches_user_sent_match_id"),
        "matches",
        ["user_sent_match_id"],
        unique=False,
    )
    op.create_table(
        "notifications",
        sa.Column("message", sa.String(length=255), nullable=False),
        sa.Column("user_id", sa.String(length=60), nullable=True),
        sa.Column(
            "notification_type",
            notification_type_enum,
            nullable=False,
        ),
        sa.Column(
            "status",
            notification_status_enum,
            nullable=False,
        ),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_notifications_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_notifications")),
    )
    op.create_index(op.f("ix_notifications_id"), "notifications", ["id"], unique=True)
    op.create_table(
        "payments",
        sa.Column("payer_id", sa.String(length=60), nullable=False),
        sa.Column(
            "transaction_id",
            sa.String(),
            nullable=True,
            comment="The ID returned by the payment gateway",
        ),
        sa.Column(
            "payer", sa.String(), nullable=False, comment="User, admin, superadmin"
        ),
        sa.Column(
            "payment_for",
            sa.String(),
            nullable=False,
            comment="Product, fund wallet, etc.",
        ),
        sa.Column("amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.String(),
            nullable=False,
            comment="Status of the payment: failed, pending, success",
        ),
        sa.Column(
            "payment_provider",
            sa.String(),
            nullable=False,
            comment="Payment gateway used: stripe, paypal, flutterwave, paystack",
        ),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["payer_id"],
            ["users.id"],
            name=op.f("fk_payments_payer_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_payments")),
    )
    op.create_index(op.f("ix_payments_id"), "payments", ["id"], unique=True)
    op.create_table(
        "places",
        sa.Column("creator_id", sa.String(length=60), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("banner", sa.String(), nullable=True),
        sa.Column("rating", sa.Integer(), nullable=True),
        sa.Column("opening_hour", sa.TIME(), nullable=True),
        sa.Column("closing_hour", sa.TIME(), nullable=True),
        sa.Column("menu_url", sa.String(), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_places_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_places")),
    )
    op.create_index(op.f("ix_places_id"), "places", ["id"], unique=True)
    op.create_table(
        "products",
        sa.Column("creator_id", sa.String(length=60), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_products_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
    )
    op.create_index(op.f("ix_products_id"), "products", ["id"], unique=True)
    op.create_table(
        "profiles",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("recovery_email", sa.String(length=255), nullable=True),
        sa.Column("verified", sa.Boolean(), nullable=False),
        sa.Column("phone", sa.String(length=15), nullable=True),
        sa.Column("bio", sa.String(length=500), nullable=True),
        sa.Column("height", sa.Float(), nullable=True),
        sa.Column(
            "genotype",
            genotype_enum,
            nullable=True,
        ),
        sa.Column("last_active_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_profiles_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_profiles")),
    )
    op.create_index("idx_profile_user_id", "profiles", ["user_id"], unique=False)
    op.create_index(op.f("ix_profiles_id"), "profiles", ["id"], unique=True)
    op.create_index(op.f("ix_profiles_user_id"), "profiles", ["user_id"], unique=False)
    op.create_table(
        "reels",
        sa.Column("creator_id", sa.String(length=60), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_reels_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reels")),
    )
    op.create_index(op.f("ix_reels_creator_id"), "reels", ["creator_id"], unique=False)
    op.create_index(op.f("ix_reels_id"), "reels", ["id"], unique=True)
    op.create_table(
        "settings",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("language", sa.String(length=5), nullable=False),
        sa.Column("dark_mode", sa.Boolean(), nullable=False),
        sa.Column("voice_call", sa.Boolean(), nullable=False),
        sa.Column("video_call", sa.Boolean(), nullable=False),
        sa.Column("notifications", sa.Boolean(), nullable=False),
        sa.Column("anonymous_mode", sa.Boolean(), nullable=False),
        sa.Column("travel_mode", sa.Boolean(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_settings_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_settings")),
    )
    op.create_index(op.f("ix_settings_id"), "settings", ["id"], unique=True)
    op.create_index(op.f("ix_settings_user_id"), "settings", ["user_id"], unique=False)
    op.create_table(
        "stickers",
        sa.Column("creator_id", sa.String(length=60), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_stickers_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_stickers")),
    )
    op.create_index(op.f("ix_stickers_id"), "stickers", ["id"], unique=True)
    op.create_index(op.f("ix_stickers_name"), "stickers", ["name"], unique=False)
    op.create_table(
        "subscription_plans",
        sa.Column("creator_id", sa.String(length=60), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "duration",
            subscription_plans_enum,
            nullable=False,
        ),
        sa.Column("amount", sa.Float(), nullable=True),
        sa.Column("price", sa.Float(), nullable=True),
        sa.Column("banner_url", sa.String(length=255), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creator_id"],
            ["users.id"],
            name=op.f("fk_subscription_plans_creator_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscription_plans")),
    )
    op.create_index(
        op.f("ix_subscription_plans_id"), "subscription_plans", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_subscription_plans_name"), "subscription_plans", ["name"], unique=False
    )
    op.create_table(
        "user_devices",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("device_token", sa.String(length=255), nullable=False),
        sa.Column("device_type", sa.String(length=50), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_user_devices_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_devices")),
        sa.UniqueConstraint("device_token", name=op.f("uq_user_devices_device_token")),
    )
    op.create_index(op.f("ix_user_devices_id"), "user_devices", ["id"], unique=True)
    op.create_table(
        "user_exit_feedbacks",
        sa.Column("exiting_user_id", sa.String(length=60), nullable=True),
        sa.Column("reason", sa.String(), nullable=False),
        sa.Column("additional_feedback", sa.String(), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["exiting_user_id"],
            ["users.id"],
            name=op.f("fk_user_exit_feedbacks_exiting_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_exit_feedbacks")),
    )
    op.create_index(
        op.f("ix_user_exit_feedbacks_id"), "user_exit_feedbacks", ["id"], unique=True
    )
    op.create_table(
        "verification_requests",
        sa.Column("user_to_verify_id", sa.String(length=60), nullable=False),
        sa.Column("verifier_id", sa.String(length=60), nullable=True),
        sa.Column(
            "status",
            verification_status_enum,
            nullable=False,
        ),
        sa.Column(
            "verified_by_bot", sa.Boolean(), server_default="FALSE", nullable=False
        ),
        sa.Column("verification_count", sa.Integer(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_to_verify_id"],
            ["users.id"],
            name=op.f("fk_verification_requests_user_to_verify_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["verifier_id"],
            ["users.id"],
            name=op.f("fk_verification_requests_verifier_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_verification_requests")),
    )
    op.create_index(
        op.f("ix_verification_requests_id"),
        "verification_requests",
        ["id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_verification_requests_user_to_verify_id"),
        "verification_requests",
        ["user_to_verify_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_verification_requests_verifier_id"),
        "verification_requests",
        ["verifier_id"],
        unique=False,
    )
    op.create_table(
        "wallets",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("balance", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("currency", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_wallets_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_wallets")),
    )
    op.create_index(op.f("ix_wallets_id"), "wallets", ["id"], unique=True)
    op.create_table(
        "withdrawals",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("destination", sa.String(), nullable=True),
        sa.Column("destination_type", sa.String(), nullable=True),
        sa.Column("account_number", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_withdrawals_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_withdrawals")),
    )
    op.create_index(op.f("ix_withdrawals_id"), "withdrawals", ["id"], unique=True)
    op.create_table(
        "activity_logs",
        sa.Column("user_id", sa.String(length=60), nullable=True),
        sa.Column("target_user_id", sa.String(length=60), nullable=True),
        sa.Column("device_id", sa.String(length=60), nullable=True),
        sa.Column("action_type", sa.String(), nullable=False),
        sa.Column("action_details", sa.String(), nullable=True),
        sa.Column("ip_address", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["device_id"],
            ["user_devices.id"],
            name=op.f("fk_activity_logs_device_id_user_devices"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["target_user_id"],
            ["users.id"],
            name=op.f("fk_activity_logs_target_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_activity_logs_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_activity_logs")),
    )
    op.create_index(op.f("ix_activity_logs_id"), "activity_logs", ["id"], unique=True)
    op.create_table(
        "event_tickets",
        sa.Column("event_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("payment_id", sa.String(length=60), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("ticket_price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("ticket_type", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
            name=op.f("fk_event_tickets_event_id_events"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["payment_id"],
            ["payments.id"],
            name=op.f("fk_event_tickets_payment_id_payments"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_event_tickets_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_event_tickets")),
    )
    op.create_index(op.f("ix_event_tickets_id"), "event_tickets", ["id"], unique=True)
    op.create_table(
        "exchanged_stickers",
        sa.Column("sender_id", sa.String(length=60), nullable=True),
        sa.Column("receiver_id", sa.String(length=60), nullable=True),
        sa.Column("sticker_id", sa.String(length=60), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["receiver_id"],
            ["users.id"],
            name=op.f("fk_exchanged_stickers_receiver_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["users.id"],
            name=op.f("fk_exchanged_stickers_sender_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["sticker_id"],
            ["stickers.id"],
            name=op.f("fk_exchanged_stickers_sticker_id_stickers"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_exchanged_stickers")),
    )
    op.create_index(
        op.f("ix_exchanged_stickers_id"), "exchanged_stickers", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_exchanged_stickers_receiver_id"),
        "exchanged_stickers",
        ["receiver_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_exchanged_stickers_sender_id"),
        "exchanged_stickers",
        ["sender_id"],
        unique=False,
    )
    op.create_table(
        "photos",
        sa.Column("user_id", sa.String(length=60), nullable=False),
        sa.Column("chat_id", sa.String(), nullable=True),
        sa.Column("product_id", sa.String(length=60), nullable=True),
        sa.Column("linked_to", sa.String(length=50), nullable=True),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("is_profile_picture", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
            name=op.f("fk_photos_product_id_products"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_photos_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_photos")),
    )
    op.create_index(op.f("ix_photos_chat_id"), "photos", ["chat_id"], unique=False)
    op.create_index(op.f("ix_photos_id"), "photos", ["id"], unique=True)
    op.create_index(
        op.f("ix_photos_product_id"), "photos", ["product_id"], unique=False
    )
    op.create_index(op.f("ix_photos_user_id"), "photos", ["user_id"], unique=False)
    op.create_table(
        "product_comments",
        sa.Column("product_id", sa.String(length=60), nullable=False),
        sa.Column("commenter_id", sa.String(length=60), nullable=False),
        sa.Column("comment_text", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["commenter_id"],
            ["users.id"],
            name=op.f("fk_product_comments_commenter_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
            name=op.f("fk_product_comments_product_id_products"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_product_comments")),
    )
    op.create_index(
        op.f("ix_product_comments_commenter_id"),
        "product_comments",
        ["commenter_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_product_comments_id"), "product_comments", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_product_comments_product_id"),
        "product_comments",
        ["product_id"],
        unique=False,
    )
    op.create_table(
        "product_likes",
        sa.Column("liker_id", sa.String(length=60), nullable=False),
        sa.Column("product_id", sa.String(length=60), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["liker_id"],
            ["users.id"],
            name=op.f("fk_product_likes_liker_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
            name=op.f("fk_product_likes_product_id_products"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_product_likes")),
    )
    op.create_index(op.f("ix_product_likes_id"), "product_likes", ["id"], unique=True)
    op.create_index(
        op.f("ix_product_likes_liker_id"), "product_likes", ["liker_id"], unique=False
    )
    op.create_index(
        op.f("ix_product_likes_product_id"),
        "product_likes",
        ["product_id"],
        unique=False,
    )
    op.create_table(
        "profile_preferences",
        sa.Column("profile_id", sa.String(length=60), nullable=False),
        sa.Column(
            "joining_purpose",
            joining_purpose_enum,
            nullable=True,
        ),
        sa.Column(
            "preferred_gender",
            gender_type_enum,
            nullable=True,
        ),
        sa.Column("desired_relationship", sa.String(length=100), nullable=True),
        sa.Column(
            "ideal_partner_qualities",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "lifestyle_habits", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "family_plans", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("religion", sa.String(length=50), nullable=True),
        sa.Column("political_views", sa.String(length=50), nullable=True),
        sa.Column(
            "location_preference",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("age_range", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "distance_range", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles.id"],
            name=op.f("fk_profile_preferences_profile_id_profiles"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_profile_preferences")),
    )
    op.create_index(
        op.f("ix_profile_preferences_id"), "profile_preferences", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_profile_preferences_profile_id"),
        "profile_preferences",
        ["profile_id"],
        unique=False,
    )
    op.create_table(
        "profile_traits",
        sa.Column("profile_id", sa.String(length=60), nullable=False),
        sa.Column("hobbies", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("habits", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profiles.id"],
            name=op.f("fk_profile_traits_profile_id_profiles"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_profile_traits")),
    )
    op.create_index(op.f("ix_profile_traits_id"), "profile_traits", ["id"], unique=True)
    op.create_index(
        op.f("ix_profile_traits_profile_id"),
        "profile_traits",
        ["profile_id"],
        unique=False,
    )
    op.create_table(
        "pushnotifications",
        sa.Column(
            "user_id",
            sa.String(length=60),
            nullable=False,
            comment="References the user to whom the push notification is sent",
        ),
        sa.Column(
            "device_token_id",
            sa.String(length=255),
            nullable=False,
            comment="References the device token for this push",
        ),
        sa.Column(
            "notification_id",
            sa.String(length=60),
            nullable=False,
            comment="References the notification associated with this push",
        ),
        sa.Column(
            "status",
            sa.Enum("UNREAD", "READ", name="notification_status_enum"),
            nullable=False,
            comment="Status of the push ('pending', 'sent', 'failed')",
        ),
        sa.Column(
            "retry_count",
            sa.Integer(),
            nullable=False,
            comment="Number of attempts to resend if it fails",
        ),
        sa.Column(
            "last_attempt_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Timestamp of the last attempt to send the push",
        ),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["device_token_id"],
            ["user_devices.id"],
            name=op.f("fk_pushnotifications_device_token_id_user_devices"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["notification_id"],
            ["notifications.id"],
            name=op.f("fk_pushnotifications_notification_id_notifications"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_pushnotifications_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_pushnotifications")),
    )
    op.create_index(
        op.f("ix_pushnotifications_id"), "pushnotifications", ["id"], unique=True
    )
    op.create_table(
        "received_gifts",
        sa.Column("sender_id", sa.String(length=60), nullable=True),
        sa.Column("receiver_id", sa.String(length=60), nullable=True),
        sa.Column("gift_id", sa.String(length=60), nullable=True),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["gift_id"],
            ["gifts.id"],
            name=op.f("fk_received_gifts_gift_id_gifts"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["receiver_id"],
            ["users.id"],
            name=op.f("fk_received_gifts_receiver_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["users.id"],
            name=op.f("fk_received_gifts_sender_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_received_gifts")),
    )
    op.create_index(op.f("ix_received_gifts_id"), "received_gifts", ["id"], unique=True)
    op.create_index(
        op.f("ix_received_gifts_receiver_id"),
        "received_gifts",
        ["receiver_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_received_gifts_sender_id"),
        "received_gifts",
        ["sender_id"],
        unique=False,
    )
    op.create_table(
        "reel_comments",
        sa.Column("reel_id", sa.String(length=60), nullable=False),
        sa.Column("commenter_id", sa.String(length=60), nullable=False),
        sa.Column("comment_text", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["commenter_id"],
            ["users.id"],
            name=op.f("fk_reel_comments_commenter_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["reel_id"],
            ["reels.id"],
            name=op.f("fk_reel_comments_reel_id_reels"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reel_comments")),
    )
    op.create_index(
        op.f("ix_reel_comments_commenter_id"),
        "reel_comments",
        ["commenter_id"],
        unique=False,
    )
    op.create_index(op.f("ix_reel_comments_id"), "reel_comments", ["id"], unique=True)
    op.create_index(
        op.f("ix_reel_comments_reel_id"), "reel_comments", ["reel_id"], unique=False
    )
    op.create_table(
        "reel_likes",
        sa.Column("liker_id", sa.String(length=60), nullable=False),
        sa.Column("reel_id", sa.String(length=60), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["liker_id"],
            ["users.id"],
            name=op.f("fk_reel_likes_liker_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["reel_id"],
            ["reels.id"],
            name=op.f("fk_reel_likes_reel_id_reels"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reel_likes")),
    )
    op.create_index(op.f("ix_reel_likes_id"), "reel_likes", ["id"], unique=True)
    op.create_index(
        op.f("ix_reel_likes_liker_id"), "reel_likes", ["liker_id"], unique=False
    )
    op.create_index(
        op.f("ix_reel_likes_reel_id"), "reel_likes", ["reel_id"], unique=False
    )
    op.create_table(
        "subscriptions",
        sa.Column("subscriber_id", sa.String(length=60), nullable=False),
        sa.Column("subscription_plan_id", sa.String(length=60), nullable=False),
        sa.Column("expires_in", sa.DateTime(), nullable=False),
        sa.Column(
            "status",
            subscription_status_enum,
            server_default="active",
            nullable=False,
        ),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["subscriber_id"],
            ["users.id"],
            name=op.f("fk_subscriptions_subscriber_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["subscription_plan_id"],
            ["subscription_plans.id"],
            name=op.f("fk_subscriptions_subscription_plan_id_subscription_plans"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscriptions")),
    )
    op.create_index(
        op.f("ix_subscriptions_expires_in"),
        "subscriptions",
        ["expires_in"],
        unique=False,
    )
    op.create_index(op.f("ix_subscriptions_id"), "subscriptions", ["id"], unique=True)
    op.create_table(
        "photo_comments",
        sa.Column("photo_id", sa.String(length=60), nullable=False),
        sa.Column("commenter_id", sa.String(length=60), nullable=False),
        sa.Column("comment_text", sa.String(), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["commenter_id"],
            ["users.id"],
            name=op.f("fk_photo_comments_commenter_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["photo_id"],
            ["photos.id"],
            name=op.f("fk_photo_comments_photo_id_photos"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_photo_comments")),
    )
    op.create_index(
        op.f("ix_photo_comments_commenter_id"),
        "photo_comments",
        ["commenter_id"],
        unique=False,
    )
    op.create_index(op.f("ix_photo_comments_id"), "photo_comments", ["id"], unique=True)
    op.create_index(
        op.f("ix_photo_comments_photo_id"), "photo_comments", ["photo_id"], unique=False
    )
    op.create_table(
        "photo_likes",
        sa.Column("liker_id", sa.String(length=60), nullable=False),
        sa.Column("photo_id", sa.String(length=60), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["liker_id"],
            ["users.id"],
            name=op.f("fk_photo_likes_liker_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["photo_id"],
            ["photos.id"],
            name=op.f("fk_photo_likes_photo_id_photos"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_photo_likes")),
    )
    op.create_index(op.f("ix_photo_likes_id"), "photo_likes", ["id"], unique=True)
    op.create_index(
        op.f("ix_photo_likes_liker_id"), "photo_likes", ["liker_id"], unique=False
    )
    op.create_index(
        op.f("ix_photo_likes_photo_id"), "photo_likes", ["photo_id"], unique=False
    )
    op.create_table(
        "product_comment_likes",
        sa.Column("liker_id", sa.String(length=60), nullable=False),
        sa.Column("product_comment_id", sa.String(length=60), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["liker_id"],
            ["users.id"],
            name=op.f("fk_product_comment_likes_liker_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["product_comment_id"],
            ["product_comments.id"],
            name=op.f("fk_product_comment_likes_product_comment_id_product_comments"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_product_comment_likes")),
    )
    op.create_index(
        op.f("ix_product_comment_likes_id"),
        "product_comment_likes",
        ["id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_product_comment_likes_liker_id"),
        "product_comment_likes",
        ["liker_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_product_comment_likes_product_comment_id"),
        "product_comment_likes",
        ["product_comment_id"],
        unique=False,
    )
    op.create_table(
        "reel_comment_likes",
        sa.Column("liker_id", sa.String(length=60), nullable=False),
        sa.Column("reel_comment_id", sa.String(length=60), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["liker_id"],
            ["users.id"],
            name=op.f("fk_reel_comment_likes_liker_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["reel_comment_id"],
            ["reel_comments.id"],
            name=op.f("fk_reel_comment_likes_reel_comment_id_reel_comments"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reel_comment_likes")),
    )
    op.create_index(
        op.f("ix_reel_comment_likes_id"), "reel_comment_likes", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_reel_comment_likes_liker_id"),
        "reel_comment_likes",
        ["liker_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reel_comment_likes_reel_comment_id"),
        "reel_comment_likes",
        ["reel_comment_id"],
        unique=False,
    )
    op.create_table(
        "photo_comment_likes",
        sa.Column("liker_id", sa.String(length=60), nullable=False),
        sa.Column("photo_comment_id", sa.String(length=60), nullable=False),
        sa.Column("id", sa.String(length=60), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["liker_id"],
            ["users.id"],
            name=op.f("fk_photo_comment_likes_liker_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["photo_comment_id"],
            ["photo_comments.id"],
            name=op.f("fk_photo_comment_likes_photo_comment_id_photo_comments"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_photo_comment_likes")),
    )
    op.create_index(
        op.f("ix_photo_comment_likes_id"), "photo_comment_likes", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_photo_comment_likes_liker_id"),
        "photo_comment_likes",
        ["liker_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_photo_comment_likes_photo_comment_id"),
        "photo_comment_likes",
        ["photo_comment_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_photo_comment_likes_photo_comment_id"),
        table_name="photo_comment_likes",
    )
    op.drop_index(
        op.f("ix_photo_comment_likes_liker_id"), table_name="photo_comment_likes"
    )
    op.drop_index(op.f("ix_photo_comment_likes_id"), table_name="photo_comment_likes")
    op.drop_table("photo_comment_likes")
    op.drop_index(
        op.f("ix_reel_comment_likes_reel_comment_id"), table_name="reel_comment_likes"
    )
    op.drop_index(
        op.f("ix_reel_comment_likes_liker_id"), table_name="reel_comment_likes"
    )
    op.drop_index(op.f("ix_reel_comment_likes_id"), table_name="reel_comment_likes")
    op.drop_table("reel_comment_likes")
    op.drop_index(
        op.f("ix_product_comment_likes_product_comment_id"),
        table_name="product_comment_likes",
    )
    op.drop_index(
        op.f("ix_product_comment_likes_liker_id"), table_name="product_comment_likes"
    )
    op.drop_index(
        op.f("ix_product_comment_likes_id"), table_name="product_comment_likes"
    )
    op.drop_table("product_comment_likes")
    op.drop_index(op.f("ix_photo_likes_photo_id"), table_name="photo_likes")
    op.drop_index(op.f("ix_photo_likes_liker_id"), table_name="photo_likes")
    op.drop_index(op.f("ix_photo_likes_id"), table_name="photo_likes")
    op.drop_table("photo_likes")
    op.drop_index(op.f("ix_photo_comments_photo_id"), table_name="photo_comments")
    op.drop_index(op.f("ix_photo_comments_id"), table_name="photo_comments")
    op.drop_index(op.f("ix_photo_comments_commenter_id"), table_name="photo_comments")
    op.drop_table("photo_comments")
    op.drop_index(op.f("ix_subscriptions_id"), table_name="subscriptions")
    op.drop_index(op.f("ix_subscriptions_expires_in"), table_name="subscriptions")
    op.drop_table("subscriptions")
    op.drop_index(op.f("ix_reel_likes_reel_id"), table_name="reel_likes")
    op.drop_index(op.f("ix_reel_likes_liker_id"), table_name="reel_likes")
    op.drop_index(op.f("ix_reel_likes_id"), table_name="reel_likes")
    op.drop_table("reel_likes")
    op.drop_index(op.f("ix_reel_comments_reel_id"), table_name="reel_comments")
    op.drop_index(op.f("ix_reel_comments_id"), table_name="reel_comments")
    op.drop_index(op.f("ix_reel_comments_commenter_id"), table_name="reel_comments")
    op.drop_table("reel_comments")
    op.drop_index(op.f("ix_received_gifts_sender_id"), table_name="received_gifts")
    op.drop_index(op.f("ix_received_gifts_receiver_id"), table_name="received_gifts")
    op.drop_index(op.f("ix_received_gifts_id"), table_name="received_gifts")
    op.drop_table("received_gifts")
    op.drop_index(op.f("ix_pushnotifications_id"), table_name="pushnotifications")
    op.drop_table("pushnotifications")
    op.drop_index(op.f("ix_profile_traits_profile_id"), table_name="profile_traits")
    op.drop_index(op.f("ix_profile_traits_id"), table_name="profile_traits")
    op.drop_table("profile_traits")
    op.drop_index(
        op.f("ix_profile_preferences_profile_id"), table_name="profile_preferences"
    )
    op.drop_index(op.f("ix_profile_preferences_id"), table_name="profile_preferences")
    op.drop_table("profile_preferences")
    op.drop_index(op.f("ix_product_likes_product_id"), table_name="product_likes")
    op.drop_index(op.f("ix_product_likes_liker_id"), table_name="product_likes")
    op.drop_index(op.f("ix_product_likes_id"), table_name="product_likes")
    op.drop_table("product_likes")
    op.drop_index(op.f("ix_product_comments_product_id"), table_name="product_comments")
    op.drop_index(op.f("ix_product_comments_id"), table_name="product_comments")
    op.drop_index(
        op.f("ix_product_comments_commenter_id"), table_name="product_comments"
    )
    op.drop_table("product_comments")
    op.drop_index(op.f("ix_photos_user_id"), table_name="photos")
    op.drop_index(op.f("ix_photos_product_id"), table_name="photos")
    op.drop_index(op.f("ix_photos_id"), table_name="photos")
    op.drop_index(op.f("ix_photos_chat_id"), table_name="photos")
    op.drop_table("photos")
    op.drop_index(
        op.f("ix_exchanged_stickers_sender_id"), table_name="exchanged_stickers"
    )
    op.drop_index(
        op.f("ix_exchanged_stickers_receiver_id"), table_name="exchanged_stickers"
    )
    op.drop_index(op.f("ix_exchanged_stickers_id"), table_name="exchanged_stickers")
    op.drop_table("exchanged_stickers")
    op.drop_index(op.f("ix_event_tickets_id"), table_name="event_tickets")
    op.drop_table("event_tickets")
    op.drop_index(op.f("ix_activity_logs_id"), table_name="activity_logs")
    op.drop_table("activity_logs")
    op.drop_index(op.f("ix_withdrawals_id"), table_name="withdrawals")
    op.drop_table("withdrawals")
    op.drop_index(op.f("ix_wallets_id"), table_name="wallets")
    op.drop_table("wallets")
    op.drop_index(
        op.f("ix_verification_requests_verifier_id"), table_name="verification_requests"
    )
    op.drop_index(
        op.f("ix_verification_requests_user_to_verify_id"),
        table_name="verification_requests",
    )
    op.drop_index(
        op.f("ix_verification_requests_id"), table_name="verification_requests"
    )
    op.drop_table("verification_requests")
    op.drop_index(op.f("ix_user_exit_feedbacks_id"), table_name="user_exit_feedbacks")
    op.drop_table("user_exit_feedbacks")
    op.drop_index(op.f("ix_user_devices_id"), table_name="user_devices")
    op.drop_table("user_devices")
    op.drop_index(op.f("ix_subscription_plans_name"), table_name="subscription_plans")
    op.drop_index(op.f("ix_subscription_plans_id"), table_name="subscription_plans")
    op.drop_table("subscription_plans")
    op.drop_index(op.f("ix_stickers_name"), table_name="stickers")
    op.drop_index(op.f("ix_stickers_id"), table_name="stickers")
    op.drop_table("stickers")
    op.drop_index(op.f("ix_settings_user_id"), table_name="settings")
    op.drop_index(op.f("ix_settings_id"), table_name="settings")
    op.drop_table("settings")
    op.drop_index(op.f("ix_reels_id"), table_name="reels")
    op.drop_index(op.f("ix_reels_creator_id"), table_name="reels")
    op.drop_table("reels")
    op.drop_index(op.f("ix_profiles_user_id"), table_name="profiles")
    op.drop_index(op.f("ix_profiles_id"), table_name="profiles")
    op.drop_index("idx_profile_user_id", table_name="profiles")
    op.drop_table("profiles")
    op.drop_index(op.f("ix_products_id"), table_name="products")
    op.drop_table("products")
    op.drop_index(op.f("ix_places_id"), table_name="places")
    op.drop_table("places")
    op.drop_index(op.f("ix_payments_id"), table_name="payments")
    op.drop_table("payments")
    op.drop_index(op.f("ix_notifications_id"), table_name="notifications")
    op.drop_table("notifications")
    op.drop_index(op.f("ix_matches_user_sent_match_id"), table_name="matches")
    op.drop_index(op.f("ix_matches_user_accept_match_id"), table_name="matches")
    op.drop_index(op.f("ix_matches_id"), table_name="matches")
    op.drop_table("matches")
    op.drop_index(op.f("ix_locations_id"), table_name="locations")
    op.drop_table("locations")
    op.drop_index(op.f("ix_libraries_title"), table_name="libraries")
    op.drop_index(op.f("ix_libraries_id"), table_name="libraries")
    op.drop_table("libraries")
    op.drop_index(op.f("ix_gifts_name"), table_name="gifts")
    op.drop_index(op.f("ix_gifts_id"), table_name="gifts")
    op.drop_table("gifts")
    op.drop_index(op.f("ix_events_id"), table_name="events")
    op.drop_table("events")
    op.drop_index(op.f("ix_dyt_tokens_id"), table_name="dyt_tokens")
    op.drop_table("dyt_tokens")
    op.drop_index(op.f("ix_date_invitations_inviter_id"), table_name="date_invitations")
    op.drop_index(op.f("ix_date_invitations_invitee_id"), table_name="date_invitations")
    op.drop_index(op.f("ix_date_invitations_id"), table_name="date_invitations")
    op.drop_index(
        op.f("ix_date_invitations_destination"), table_name="date_invitations"
    )
    op.drop_table("date_invitations")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'notification_status_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS notification_status_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'gender_type_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS gender_type_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'notification_type_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS notification_type_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'genotype_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS genotype_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'joining_purpose_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS joining_purpose_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'user_role_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS user_role_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'date_invitation_status_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS date_invitation_status_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'subscription_plans_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS subscription_plans_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'verification_status_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS verification_status_enum';
        END IF;
    END $$;"""
    )

    op.execute(
        """DO $$
    BEGIN
        -- Check if there are any columns using the ENUM type
        IF NOT EXISTS (
            SELECT 1
            FROM pg_type t
            JOIN pg_enum e ON t.oid = e.enumtypid
            JOIN pg_attribute a ON a.atttypid = t.oid
            WHERE t.typname = 'subscription_status_enum'
        ) THEN
            -- Drop the ENUM type if no dependencies found
            EXECUTE 'DROP TYPE IF EXISTS subscription_status_enum';
        END IF;
    END $$;"""
    )
    # ### end Alembic commands ###
